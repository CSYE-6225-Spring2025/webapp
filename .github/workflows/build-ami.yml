name: Build and Deploy AMI

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Run integration test
    runs-on: ubuntu-latest
    env:
      SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_USERNAME : ${{ secrets.DB_USERNAME }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: health_check
        ports:
          - 3306:3306

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run Tests
        run: mvn clean test

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  build-ami:
    name: build AMI image
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}"

      - name: Create JSON File from Secret
        run: |
          echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' | jq '.' > secret.json

      - name: Initialize Packer (Install Plugins)
        run: packer init aws.pkr.hcl

      - name: Create Packer Variable File
        run: |
          cat <<EOF > auto.pkrvars.hcl
          aws_region    = "${{ secrets.AWS_REGION }}"
          gcp_demo_account = "${{ secrets.GCP_DEMO_ACCOUNT }}"
          gcp_source_image = "${{ secrets.GCP_SOURCE_IMAGE }}"
          gcp_source_image_family = "${{ secrets.GCP_SOURCE_IMAGE_FAMILY }}"
          gcp_machine_type = "${{ secrets.GCP_IMAGE_NAME }}"
          gcp_disk_type = "${{ secrets.GCP_DISK_TYPE }}"
          gcp_network = "${{ secrets.GCP_NETWORK }}"
          gcp_image_description = "${{ secrets.GCP_IMAGE_DESCRIPTION }}"
          gcp_image_name = "${{ secrets.GCP_IMAGE_NAME }}"
          instance_type = "${{ secrets.INSTANCE_TYPE }}"
          accounts      =  ${{ secrets.AWS_ACCOUNTS }}
          ami_name_prefix = "${{ secrets.AMI_NAME_PREFIX }}"
          user_name     = "${{ secrets.USER_NAME }}"
          group_name    = "${{ secrets.GROUP_NAME }}"
          ssh_username  = "${{ secrets.SSH_USERNAME }}"
          PACKER_DB_USERNAME = "${{ secrets.PACKER_DB_USERNAME }}"
          PACKER_DB_PASSWORD = "${{ secrets.PACKER_DB_PASSWORD }}"
          gcp_project_id = "${{ secrets.GCP_PROJECT_ID }}"
          gcp_zone      = "${{ secrets.GCP_ZONE }}"
          credentials_file  = "secret.json"
          
          EOF

      - name: Run Packer Build
        run: packer build -var-file=auto.pkrvars.hcl aws.pkr.hcl







